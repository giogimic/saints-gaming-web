// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  admin
  moderator
  member
}

model User {
  id               String             @id @default(cuid())
  name             String?
  email            String?            @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  role             UserRole           @default(member)
  bio              String?
  steamId          String?            @unique
  discordId        String?
  twitchId         String?
  avatar           String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  lastLogin        DateTime?
  accounts         Account[]
  sessions         Session[]
  socialLinks      SocialLink[]
  threads          Thread[]
  posts            Post[]
  comments         Comment[]
  news             News[]
  settings         UserSettings?
  gamingProfile    UserGamingProfile?
  pages            Page[]
  contentBlocks    ContentBlock[]
  contentRevisions ContentRevision[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  theme              String   @default("system")
  notifications      Boolean  @default(true)
  language           String   @default("en")
  timezone           String   @default("UTC")
  emailNotifications Boolean  @default(true)
  darkMode           Boolean  @default(false)
  showOnlineStatus   Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id])
}

model UserGamingProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  favoriteGames     String   @default("[]")
  gamingSetup       String   @default("[]")
  gamingPreferences String   @default("[]")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
}

model SocialLink {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  order       Int      @default(0)
  isDefault   Boolean  @default(false)
  threads     Thread[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  threadId  String
  author    User      @relation(fields: [authorId], references: [id])
  thread    Thread    @relation(fields: [threadId], references: [id])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Page {
  id              String            @id @default(cuid())
  slug            String            @unique
  title           String
  description     String?
  content         String
  isPublished     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       User              @relation(fields: [createdById], references: [id])
  createdById     String
  blocks          ContentBlock[]
  metadata        Json?
  template        String?
  parent          Page?             @relation("PageHierarchy", fields: [parentId], references: [id])
  parentId        String?
  children        Page[]            @relation("PageHierarchy")
  contentRevisions ContentRevision[]

  @@index([slug])
  @@index([createdById])
}

model ContentBlock {
  id              String            @id @default(cuid())
  type            String
  title           String?
  content         Json
  order           Int               @default(0)
  isPublished     Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  createdBy       User              @relation(fields: [createdById], references: [id])
  createdById     String
  page            Page              @relation(fields: [pageId], references: [id])
  pageId          String
  settings        Json?
  metadata        Json?
  contentRevisions ContentRevision[]

  @@index([pageId])
  @@index([type])
}

model ContentRevision {
  id        String        @id @default(cuid())
  content   Json
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  createdBy User          @relation(fields: [createdById], references: [id])
  createdById String
  block      ContentBlock? @relation(fields: [blockId], references: [id])
  blockId    String?
  page       Page?        @relation(fields: [pageId], references: [id])
  pageId     String?
}

model Thread {
  id          String   @id @default(cuid())
  title       String
  content     String
  authorId    String
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  viewCount   Int      @default(0)
  author      User     @relation(fields: [authorId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  posts       Post[]
}

model News {
  id        String   @id @default(cuid())
  title     String
  content   String
  authorId  String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model SiteSettings {
  id        String   @id @default("1")
  settings  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id          String   @id @default(cuid())
  name        String
  description String
  image       String
  status      String   @default("offline")
  players     Int      @default(0)
  maxPlayers  Int      @default(0)
  version     String
  ip          String
  type        String
  features    String   @default("[]")
  rules       String   @default("[]")
  modpack     Json?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
