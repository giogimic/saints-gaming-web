// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("member")
  bio           String?
  avatar        String?
  steamId       String?
  discordId     String?
  twitchId      String?
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  gamingProfile UserGamingProfile?
  socialLinks   SocialLink[]
  posts         ForumPost[]
  replies       ForumReply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                String  @id @default(uuid())
  userId           String  @unique
  theme            String  @default("light")
  notifications    Boolean @default(true)
  language         String  @default("en")
  timezone         String  @default("UTC")
  emailNotifications Boolean @default(true)
  darkMode         Boolean @default(false)
  showOnlineStatus Boolean @default(true)
  user             User    @relation(fields: [userId], references: [id])
}

model UserGamingProfile {
  id              String  @id @default(uuid())
  userId          String  @unique
  steamId         String?
  discordUsername String?
  favoriteGames   String  @default("[]")
  gamingSetup     String  @default("{}")
  gamingPreferences String @default("{}")
  user            User    @relation(fields: [userId], references: [id])
}

model SocialLink {
  id        String   @id @default(uuid())
  userId    String
  platform  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model ForumCategory {
  id          String      @id @default(uuid())
  name        String
  description String?
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  posts       ForumPost[]
}

model ForumPost {
  id          String        @id @default(uuid())
  title       String
  content     String
  authorId    String
  categoryId  String
  isPinned    Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  category    ForumCategory @relation(fields: [categoryId], references: [id])
  replies     ForumReply[]
  votes       PostVote[]
}

model ForumReply {
  id        String    @id @default(uuid())
  content   String
  authorId  String
  postId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  post      ForumPost @relation(fields: [postId], references: [id])
}

model PostVote {
  id        String    @id @default(uuid())
  postId    String
  userId    String
  value     Int
  createdAt DateTime  @default(now())
  post      ForumPost @relation(fields: [postId], references: [id])

  @@unique([postId, userId])
}
