// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  moderator
  member
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("member")
  bio           String?
  steamId       String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?
  accounts      Account[]
  sessions      Session[]
  socialLinks   SocialLink[]
  threads       Thread[]
  posts         Post[]
  comments      Comment[]
  settings      UserSettings?        @relation("UserSettingsRelation")
  gamingProfile UserGamingProfile?   @relation("UserGamingProfileRelation")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  theme             String   @default("system")
  notifications     Boolean  @default(true)
  language          String   @default("en")
  timezone          String   @default("UTC")
  emailNotifications Boolean @default(true)
  darkMode          Boolean  @default(false)
  showOnlineStatus  Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("UserSettingsRelation", fields: [userId], references: [id])
}

model UserGamingProfile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  favoriteGames      String   @default("[]")
  gamingSetup        String   @default("[]")
  gamingPreferences  String  @default("[]")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation("UserGamingProfileRelation", fields: [userId], references: [id])
}

model SocialLink {
  id        String   @id @default(cuid())
  userId    String
  platform  String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  slug        String   @unique
  order       Int      @default(0)
  isDefault   Boolean  @default(false)
  threads     Thread[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id        String    @id @default(cuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  threadId  String
  author    User      @relation(fields: [authorId], references: [id])
  thread    Thread    @relation(fields: [threadId], references: [id])
  comments  Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
}

model Page {
  id        String   @id @default(cuid())
  slug      String   @unique
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Thread {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  isPinned    Boolean  @default(false)
  isLocked    Boolean  @default(false)
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  authorId    String
  categoryId  String
  author      User     @relation(fields: [authorId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  posts       Post[]

  @@unique([categoryId, slug])
}
